#!/usr/bin/env bash
# tools/fetch_and_convert_message_map.sh
# Downloads the raw MessageReceiver.as file and converts the mapping to protocol/message_map.py
# Usage: ./tools/fetch_and_convert_message_map.sh

set -euo pipefail

RAW_URL="https://raw.githubusercontent.com/scalexm/DofusInvoker/ddff8fe00a97983dcf5db588bf96f0193f332720/com/ankamagames/dofus/network/MessageReceiver.as"
TMP_AS="/tmp/MessageReceiver.as"
OUT_PY="protocol/message_map.py"

mkdir -p protocol
echo "Downloading $RAW_URL ..."
curl -fsSL "$RAW_URL" -o "$TMP_AS" || { echo 'Failed to download file. Check URL or network.'; exit 2; }

echo "Parsing ActionScript to Python dict..."
# The AS file contains lines like:
# case 214: msg = "AuthenticationTicketMessage"; break;
# or similar. We'll extract lines with 'case <num>:' and the following assignment to msg or messageName.
# Use awk/sed to produce a python dict literal.

awk '
  BEGIN { print "### generated by fetch_and_convert_message_map.sh. EDIT AT YOUR OWN RISK"; print "MESSAGE_MAP = {" }
  /case[[:space:]]+[0-9]+[[:space:]]*:/ {
    # line like: case 214:
    num = ""; match($0, /case[[:space:]]+([0-9]+)[[:space:]]*:/, a); if (a[1] != "") num = a[1];
    getline; # consume next line(s) to find the message string
    line = $0;
    # try to extract "MessageName" in quotes
    msg = "";
    if (match(line, /\"([^\"]+)\"/, b)) { msg = b[1]; }
    else {
      # fallback: search the next 6 lines for a quoted string
      for (i=0;i<6;i++) {
        if (getline == 0) break;
        if (match($0, /\"([^\"]+)\"/, b)) { msg = b[1]; break; }
      }
    }
    if (num != "" && msg != "") {
      # escape backslashes and quotes
      gsub(/\\/, "\\\\", msg); gsub(/"/, "\\\"", msg);
      print "    " num ": \"" msg "\"," 
    } else if (num != "") {
      print "    " num ": \"<UNKNOWN>\"," 
    }
  }
  END { print "}" }
' "$TMP_AS" > /tmp/_message_map_part.py

# Wrap in a valid python file header
cat > "$OUT_PY" <<'PY'
# AUTOGENERATED file - generate with tools/fetch_and_convert_message_map.sh
# This file maps numeric message IDs to AS message type names (strings).
# If entries are missing or incorrect, you can edit this file manually.
PY
cat /tmp/_message_map_part.py >> "$OUT_PY"
rm -f /tmp/_message_map_part.py

echo "Wrote $OUT_PY. Example entries:"
python - <<PY
from importlib import import_module, util
import sys, pathlib
p = pathlib.Path("protocol/message_map.py")
if p.exists():
    print(open(p).read().splitlines()[0:30])
else:
    print("protocol/message_map.py not found")
PY

echo "Done. If mapping looks off, inspect $TMP_AS (downloaded as a backup)."
